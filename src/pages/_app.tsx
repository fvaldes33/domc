import "@/styles/globals.css";
import "xterm/css/xterm.css";

import { SplashScreen } from "@capacitor/splash-screen";
import { Nunito_Sans } from "@next/font/google";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import type { AppProps } from "next/app";
import Head from "next/head";
import { useEffect, useRef, useState } from "react";

import { useGetPreference } from "@/hooks/usePreferences";
import { App } from "@/components/App";
import { LoadingScreen } from "@/components/LoadingScreen";
import { SetupScreen } from "@/components/SetupScreen";
import { MissonControlProvider } from "@/components/MissionControlProvider";
import { Toaster } from "react-hot-toast";
import {
  DO_COLOR_SCHEME,
  DO_COLOR_SCHEME_PREF,
  DO_TOKEN_KEY,
} from "@/utils/const";
import { Capacitor } from "@capacitor/core";
import { FirebaseAnalytics } from "@capacitor-community/firebase-analytics";

// const inter = Inter({ subsets: ["latin"] });
const nunito = Nunito_Sans({
  subsets: ["latin"],
  weight: ["400", "600", "700"],
  display: "swap",
  variable: "--nunito-font",
});

export default function MyApp({ Component, pageProps }: AppProps) {
  const [queryClient] = useState(
    () =>
      new QueryClient({
        defaultOptions: {
          queries: {
            refetchOnWindowFocus: false,
          },
        },
      })
  );

  return (
    <QueryClientProvider client={queryClient}>
      <Head>
        <title>Digital Ocean Mission Control</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, viewport-fit=cover"
        />
        <style
          dangerouslySetInnerHTML={{
            __html: `:root {
          --nunito-font: ${nunito.style.fontFamily}
        }`,
          }}
        ></style>
      </Head>
      <AppWrapper>
        <Component {...pageProps} />
        <Toaster containerClassName="mt-safe" />
      </AppWrapper>
    </QueryClientProvider>
  );
}

function AppWrapper({ children }: { children: React.ReactNode }) {
  const fbRef = useRef();
  const [appReady, setAppReady] = useState<boolean>(false);

  const { data: token, isLoading } = useGetPreference<string | null>({
    key: DO_TOKEN_KEY,
  });
  const { data: colorScheme } = useGetPreference<"light" | "dark">({
    key: DO_COLOR_SCHEME,
    defaultValue: "light",
  });

  const { data: colorSchemePref } = useGetPreference<"system" | "manual">({
    key: DO_COLOR_SCHEME_PREF,
    defaultValue: "manual",
  });

  useEffect(() => {
    (async () => {
      if (Capacitor.isNativePlatform()) {
        await SplashScreen.hide();
        setAppReady(true);
      } else {
        if (fbRef.current) return;

        try {
          fbRef.current = await FirebaseAnalytics.initializeFirebase({
            apiKey: "AIzaSyBEismkBVCIHrRG7k9Czw0xMlnDZsXR6GI",
            authDomain: "mission-control-1b51b.firebaseapp.com",
            projectId: "mission-control-1b51b",
            storageBucket: "mission-control-1b51b.appspot.com",
            messagingSenderId: "661231837452",
            appId: "1:661231837452:web:f11e064cac1ea19fb4a929",
            measurementId: "G-WBKXHBW84Q",
          });

          await FirebaseAnalytics.setCollectionEnabled({
            enabled: false,
          });
        } catch (error) {
          // shhhh
        } finally {
          setAppReady(true);
        }
      }
    })();
  }, []);

  return (
    <App>
      {isLoading || !appReady ? (
        <LoadingScreen />
      ) : token ? (
        <MissonControlProvider
          theme={colorScheme ?? "light"}
          token={token}
          colorSchemePref={colorSchemePref ?? "manual"}
        >
          {children}
        </MissonControlProvider>
      ) : (
        <SetupScreen />
      )}
    </App>
  );
}
